"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4595],{8676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=t(5893),s=t(1151);const i={sidebar_label:"PAMValidator",title:"PAMValidator"},a=void 0,l={id:"api_reference/PAMValidator",title:"PAMValidator",description:"PAMValidator Objects",source:"@site/docs/api_reference/PAMValidator.md",sourceDirName:"api_reference",slug:"/api_reference/PAMValidator",permalink:"/PAModelpy/api_reference/PAMValidator",draft:!1,unlisted:!1,editUrl:"https://github.com/SamiralVdB/PAModelpy/tree/main/docs/docs/api_reference/PAMValidator.md",tags:[],version:"current",frontMatter:{sidebar_label:"PAMValidator",title:"PAMValidator"},sidebar:"tutorialSidebar",previous:{title:"EnzymeSectors",permalink:"/PAModelpy/api_reference/EnzymeSectors"},next:{title:"PAModel",permalink:"/PAModelpy/api_reference/PAModel"}},o={},d=[{value:"PAMValidator Objects",id:"pamvalidator-objects",level:2},{value:"MW_GLC",id:"mw_glc",level:4},{value:"GRADIENT_MAX",id:"gradient_max",level:4},{value:"GRADIENT_STEP",id:"gradient_step",level:4},{value:"GRADIENT_MIN",id:"gradient_min",level:4},{value:"run_simulations_glc_o2_gradient",id:"run_simulations_glc_o2_gradient",level:4},{value:"run_simulations_ups",id:"run_simulations_ups",level:4},{value:"custom_plot",id:"custom_plot",level:4}];function c(e){const n={code:"code",em:"em",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"pamvalidator-objects",children:"PAMValidator Objects"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class PAMValidator(object)\n"})}),"\n",(0,r.jsx)(n.h4,{id:"mw_glc",children:"MW_GLC"}),"\n",(0,r.jsx)(n.p,{children:"g/mol"}),"\n",(0,r.jsx)(n.h4,{id:"gradient_max",children:"GRADIENT_MAX"}),"\n",(0,r.jsx)(n.p,{children:"mmol/gdw/h"}),"\n",(0,r.jsx)(n.h4,{id:"gradient_step",children:"GRADIENT_STEP"}),"\n",(0,r.jsx)(n.p,{children:"mmol/gdw/h"}),"\n",(0,r.jsx)(n.h4,{id:"gradient_min",children:"GRADIENT_MIN"}),"\n",(0,r.jsx)(n.p,{children:"mmol/gdw/h"}),"\n",(0,r.jsx)(n.h4,{id:"run_simulations_glc_o2_gradient",children:"run_simulations_glc_o2_gradient"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def run_simulations_glc_o2_gradient(\n        oxygen_gradient: list,\n        params_to_save: Union[str, list] = "R_TranslationalProteinSector")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Function to run simulations of different oxygen gradients for a range of growth rates."}),"\n",(0,r.jsx)(n.p,{children:"This will simulate growth for the entire range of glucose concentrations for each oxygen uptake rate as given by the input."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"oxygen_gradient"})," ",(0,r.jsx)(n.em,{children:"list"})," - List of upper bounds for the oxygen uptake reaction to loop over."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params_to_save"})," ",(0,r.jsx)(n.em,{children:"optional"})," - string or list, which parameter(s) to save for further analysis (default: translational protein sector constraint)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results"})," ",(0,r.jsx)(n.em,{children:"list of dataframes"})," - Saves the growth rate, glucose uptake rate, and the user-defined parameters for each oxygen uptake rate in separate dataframes."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"run_simulations_ups",children:"run_simulations_ups"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def run_simulations_ups(\n        ups_gradient: list,\n        params_to_save: Union[str, list] = "R_TranslationalProteinSector")\n'})}),"\n",(0,r.jsx)(n.p,{children:"Function to run simulations with increasing unused enzyme sectors proportions for a range of growth rates."}),"\n",(0,r.jsx)(n.p,{children:"This will simulate growth for the entire range of glucose concentrations for a range of fractions of ups_0 as given by the input."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ups_gradient"})," ",(0,r.jsx)(n.em,{children:"list"})," - List of upper bounds for the oxygen uptake reaction to loop over."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"params_to_save"})," ",(0,r.jsx)(n.em,{children:"optional"})," - string or list, which parameter(s) to save for further analysis (default: translational protein sector constraint)."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"results"})," ",(0,r.jsx)(n.em,{children:"list of dataframes"})," - Saves the growth rate, glucose uptake rate, and the user-defined parameters for each oxygen uptake rate in separate dataframes."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"custom_plot",children:"custom_plot"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def custom_plot(rxn_ids: list,\n                valid_dataframe: pd.DataFrame = None,\n                xaxis: str = None,\n                c_uptake_rxn: str = GLUCOSE_EXCHANGE_RXNID)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Function to plot the results of custom reactions."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rxn_ids"})," ",(0,r.jsx)(n.em,{children:"list of str"})," - Reaction identifiers of the reactions to be plotted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"valid_dataframe"})," ",(0,r.jsx)(n.em,{children:"pandas.DataFrame, optional"})," - A DataFrame with experimental data to validate the results with.\nThe columns should be the same as the rxn_id of the reaction to be plotted and the reaction which should be plotted\non the x-axis (by default the glucose exchange reaction ",(0,r.jsx)(n.code,{children:"EX_glc__D_e_b"}),"). If the DataFrame is not provided,\nonly the simulation results will be plotted."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"xaxis"})," ",(0,r.jsx)(n.em,{children:"str, optional"})," - The reaction identifier of the reaction which should be plotted on the x-axis (default: ",(0,r.jsx)(n.code,{children:"EX_glc__D_e_b"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Prints scatter plots of the model simulations vs. experimental data points (if provided)."})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);